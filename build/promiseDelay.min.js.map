{"version":3,"sources":["main.js"],"names":["inject","PromiseConstructor","extName","Promise","Error","ms","this","then","value","resolve","setTimeout","prototype","constructor","root","self","global","define","amd","module","exports","PromiseDelay"],"mappings":";;;;;;CAKA,WAYA,QAAAA,GAAAC,EAAAC,GAWA,GAVA,gBAAAD,KACAC,EAAAD,GAGAC,EAAA,gBAAAA,GAAAA,EAAA,QAEAD,EACA,kBAAAA,IAAAA,GACA,kBAAAE,UAAAA,SAAA,MAEAF,EACA,KAAA,IAAAG,OAAA,kEA+BA,OApBAH,GAAAC,GAAA,SAAAG,GAGA,MAFAA,GAAAA,GAAA,IAEAC,eAAAL,GACAK,KAAAC,KAAA,SAAAC,GACA,MAAAP,GAAAC,GAAAG,GAAAE,KAAA,WACA,MAAAC,OAIA,GAAAP,GAAA,SAAAQ,GACAC,WAAAD,EAAAJ,MAKA,kBAAAJ,IAAAA,EAAAU,WAAAV,EAAAU,UAAAC,cAAAX,IACAA,EAAAU,UAAAT,GAAAD,EAAAC,IAGAD,EAGA,GAAAY,GAAA,gBAAAC,OAAAA,KAAAA,OAAAA,MAAAA,MACA,gBAAAC,SAAAA,OAAAA,SAAAA,QAAAA,MAEA,mBAAAC,SAAAA,OAAAC,IACAD,OAAA,WACA,MAAAhB,KAEA,gBAAAkB,SAAAA,QAAAA,OAAAC,QACAD,OAAAC,QAAAnB,EAEAa,EAAAO,aAAApB","file":"promiseDelay.min.js","sourcesContent":["/**\n * promise-delay - Simple delay promise\n * @version v1.0.0\n * @link https://github.com/smelukov/PromiseDelay#readme\n * @license MIT\n */\n/**\n * @licence\n * @author Sergey Melyukov 2016\n */\n\n(function() {\n\t/**\n\t * Inject method with name `extName` to `PromiseConstructor`\n\t *\n\t * @param {Function|String=} PromiseConstructor which constructor should be extended\n\t *                           If not defined, then default promise-constructor will be used\n\t * @param {String=} extName name of the method. If not defined, then 'delay' will be used\n\t *\n\t * @returns {Function}\n\t *\n\t * @throws {Error}\n\t */\n\tfunction inject(PromiseConstructor, extName) {\n\t\tif (typeof PromiseConstructor === 'string') {\n\t\t\textName = PromiseConstructor;\n\t\t}\n\n\t\textName = typeof extName === 'string' ? extName : 'delay';\n\n\t\tPromiseConstructor =\n\t\t\t(typeof PromiseConstructor === 'function' && PromiseConstructor) ||\n\t\t\t(typeof Promise === 'function' && Promise) || null;\n\n\t\tif (!PromiseConstructor) {\n\t\t\tthrow new Error('Wrong constructor is passed or browser doesn\\'t support promises');\n\t\t}\n\n\t\t/**\n\t\t * Delay promise\n\t\t * Will be resolved after `ms` milliseconds. 1000 by default\n\t\t *\n\t\t * @param {number=} ms\n\t\t *\n\t\t * @return {Promise}\n\t\t */\n\t\tPromiseConstructor[extName] = function(ms) {\n\t\t\tms = ms || 1000;\n\n\t\t\tif (this instanceof PromiseConstructor) {\n\t\t\t\treturn this.then(function(value) {\n\t\t\t\t\treturn PromiseConstructor[extName](ms).then(function() {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn new PromiseConstructor(function(resolve) {\n\t\t\t\t\tsetTimeout(resolve, ms);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tif (typeof PromiseConstructor === 'function' && PromiseConstructor.prototype && PromiseConstructor.prototype.constructor === PromiseConstructor) {\n\t\t\tPromiseConstructor.prototype[extName] = PromiseConstructor[extName];\n\t\t}\n\n\t\treturn PromiseConstructor;\n\t}\n\n\tvar root = (typeof self == 'object' && self.self === self && self) ||\n\t\t(typeof global == 'object' && global.global === global && global);\n\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(function() {\n\t\t\treturn inject;\n\t\t});\n\t} else if (typeof module === 'object' && module && module.exports) {\n\t\tmodule.exports = inject;\n\t} else {\n\t\troot.PromiseDelay = inject;\n\t}\n})();\n"],"sourceRoot":"../src"}